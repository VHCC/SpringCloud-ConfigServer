buildscript {
    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:1.0.11.RELEASE"
    }
}

plugins {
    id 'org.springframework.boot' version '2.3.12.RELEASE'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'java'
}

group = 'com.frank.spring.cloud'
version = '0.0.1'
sourceCompatibility = 1.8

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
    maven { url 'http://maven.aliyun.com/nexus/content/repositories/jcenter' }
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://repo.spring.io/snapshot' }
    mavenCentral()
}

ext {
    bootVersion = '2.3.12.RELEASE'
    fastjsonVer = '1.2.83'
    jodaVer = '2.2'
    druidVer = '1.1.10'
    lombokVer = '1.18.22'
    flywayVer = '5.2.4'
    codecVer = '1.4'
    jwtVer = '3.4.1'
    jpyVer = '1.0'
    cloudStarterVersion = 'Hoxton.SR12'
    cloudEurekaVersion = '2.2.9.RELEASE'
    springBootAdminVersion = '2.3.1'
    graphQLVersion = '11.0.0'
    ddgVersion = '0.92.0'
}

jar {
    manifestContentCharset 'utf-8'
    metadataCharset 'utf-8'
    manifest {
        attributes 'Main-Class': 'com.frank.spring.boot.BootApplication'
    }
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

task createProperties(dependsOn: processResources) {
    doLast {
        new File("$buildDir/resources/main/version.properties").withWriter { w ->
            Properties p = new Properties()
            p['version'] = project.version.toString()
            p.store w, null
        }
    }
}

classes {
    dependsOn createProperties
}

test {
    useJUnitPlatform()
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${cloudStarterVersion}"
        mavenBom "org.springframework.boot:spring-boot-dependencies:${bootVersion}"
    }
}

dependencies {
    // Validated
    implementation ("org.springframework.cloud:spring-cloud-starter:${cloudEurekaVersion}")
    implementation ("org.springframework.cloud:spring-cloud-netflix-eureka-client:${cloudEurekaVersion}")
    implementation ("org.springframework.cloud:spring-cloud-starter-netflix-eureka-client:${cloudEurekaVersion}")

    implementation ("de.codecentric:spring-boot-admin-starter-client:${springBootAdminVersion}")
    implementation ("de.codecentric:spring-boot-admin-dependencies:${springBootAdminVersion}")

//    implementation ("org.springframework.boot:spring-boot-starter-data-redis")
    implementation ("org.springframework.cloud:spring-cloud-starter-zipkin")
    implementation ("org.springframework.cloud:spring-cloud-starter-sleuth")

    implementation ("com.graphql-java-kickstart:graphql-spring-boot-starter:${graphQLVersion}")
    implementation ("com.graphql-java-kickstart:graphql-java-tools:${graphQLVersion}")
    // Validated

    // TEST
    implementation ("org.springframework.cloud:spring-cloud-config-server")

    // TEST section


    implementation("com.alibaba:fastjson:${fastjsonVer}")

    implementation ("org.springframework.boot:spring-boot-starter-parent:${bootVersion}")
//    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation ('org.springframework.boot:spring-boot-starter-web')
//    implementation 'org.springframework.boot:spring-boot-starter-web-services'
    implementation ("org.springframework.boot:spring-boot-starter-actuator:${bootVersion}")
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
    useJUnitPlatform()
}
